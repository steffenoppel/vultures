
  model {
    #-------------------------------------------------
    # integrated population model for the balkan population
    # - age structured model with 6 age classes: 
    # - age-specific probability to recruit at ages 4 or 5
    # - age-specific survival derived from tracking data
    # - adult survival based on territory occupancy; CHANGED in 2023 to not include monthly occasions and effort
    # - pre breeding census, female-based assuming equal sex ratio & survival
    # - FUTURE PROJECTION WITH ONE SCENARIO
    # - productivity supplemented by captive-bred juveniles (0-10 per year)
    # - included GOF test for SSM
    #-------------------------------------------------
    
    
    #-------------------------------------------------  
    # 1. PRIORS FOR ALL DATA SETS
    #-------------------------------------------------
    
    # Priors and constraints FOR FECUNDITY
    mu.fec ~ dunif(0,2)           # Priors on fecundity can range from 0- 2 chicks per pair (uninformative)
    
    # Priors and constraints FOR POPULATION COUNTS OBSERVATION
    for (s in 1:countries){			### start loop over every country
      sigma.obs.count[s] ~ dunif(0.1,100)	#Prior for SD of observation process (variation in detectability)
      tau.obs.count[s]<-pow(sigma.obs.count[s],-2)
    }
    
    # Priors and constraints FOR JUVENILE SURVIVAL FROM TELEMETRY
       #### MONTHLY SURVIVAL PROBABILITY
    for (i in 1:nind){
      for (t in f.telemetry[i]:(n.occasions)){
        logit(phi[i,t]) <- lp.mean.telemetry +      ### intercept for mean survival 
            b.phi.capt*(capt[i]) +     ### survival dependent on captive-release (captive-raised or other)
            b.phi.mig*(mig[i,t]) +     ### survival dependent on migration or not (in this month)
            b.phi.age*(age[i,t]) +    ### survival dependent on age (juvenile or other)
            b.phi.LIFE*(LIFE[i,t]) +     ### survival dependent on LIFE project
            b.phi.long*(long[i])*(juv[i,t]) ### survival varies for juvenile first-time migrants when they originate from farther west
      } #t
    } #i
    
    #### BASELINE FOR SURVIVAL PROBABILITY (wild adult stationary from east)
    mean.phi ~ dunif(0.9, 1)   # uninformative prior for all MONTHLY survival probabilities
    lp.mean.telemetry <- log(mean.phi/(1 - mean.phi))    # logit transformed survival intercept

    #### SLOPE PARAMETERS FOR SURVIVAL PROBABILITY
    b.phi.age ~ dnorm(0, 0.001)           # Prior for COST OF MIGRATION migration on survival probability on logit scale
    b.phi.capt ~ dnorm(0, 0.001)         # Prior for captive release on survival probability on logit scale
    b.phi.mig ~ dunif(-2,0)         # Prior for captive release on survival probability on logit scale
    b.phi.LIFE ~ dnorm(0, 0.001)         # Prior for LIFE effect on survival probability on logit scale    
    b.phi.long ~ dnorm(0, 0.001)         # Prior for longitudinal effect on survival probability on logit scale  
    
    #### TAG FAILURE AND LOSS PROBABILITY
    for (i in 1:nind){
      for (t in f.telemetry[i]:(n.occasions)){
        logit(p.obs[i,t]) <- base.obs
        logit(tag.fail[i,t]) <- base.fail #+ beta3*tfail[i] #### probability of TAG FAILURE is influenced by tag type and tag age
        logit(p.found.dead[i,t]) <- base.recover
      } #t
    } #i
    
    
    ##### SLOPE PARAMETERS FOR OBSERVATION PROBABILITY
    base.obs ~ dnorm(0, 0.001)                # Prior for intercept of observation probability on logit scale
    base.fail ~ dnorm(0, 0.001)               # Prior for intercept of tag failure probability on logit scale
    base.recover ~ dnorm(0, 0.001)               # Prior for intercept of tag failure probability on logit scale
    #beta3 ~ dnorm(0, 0.001)T(-10, 10)         # Prior for slope parameter for fail probability with tag movement during last 10 GPS fixes
    
    
        # Priors and constraints FOR ADULT SURVIVAL FROM TERRITORY MONITORING
    
    ## Priors for detection probability
    lmu.p.terrvis <- log(mean.p.terrvis/(1 - mean.p.terrvis))    # logit transformed detection intercept
    mean.p.terrvis ~ dunif(0, 1)			
    
    # Det prob relationship with observation effort
    beta.obs.eff.terrvis ~ dnorm(0, 0.0001)
    
    
    # Priors for survival
    for (nypterr in 1:2){   ## only 2 survival periods
      mean.phi.terrvis[nypterr] ~ dunif(0.5, 1)   # informative prior for annual survival probabilities BEFORE/AFTER 2016
      #mean.rec.terrvis[nypterr] ~ dunif(0, 1)   # informative prior for annual recruitment probabilities BEFORE/AFTER 2016
    }    
    # Prior for recruitment
   mean.rec.terrvis ~ dunif(0, 1)   # informative prior for annual recruitment probabilities BEFORE/AFTER 2016 
    
    
    ### RANDOM OBSERVATION EFFECT FOR EACH TERRITORY AND YEAR
    
    for (nyRpterr in 1:nprim.terrvis){
      for (nsit in 1:nsite.terrvis){
        rand.obs.terrvis[nsit,nyRpterr] ~ dnorm(0, tau.obs.terrvis)
        }
    }
    
    tau.obs.terrvis <- 1 / (sd.obs.terrvis * sd.obs.terrvis)
    sd.obs.terrvis ~ dunif(0, 3)
    
    
    # Priors for population process and immigration
    
    # Initial population sizes for first year of monitoring
    nestlings[1] ~ dunif(50, 100)   ##changed from JUV
    N1[1] ~ dunif(10, 35)
    N2[1] ~ dunif(5, 20)
    N3[1] ~ dunif(3, 15)
    N4[1] ~ dunif(0, 10)
    N5[1] ~ dunif(0, 5)
    N6[1] ~ dunif(190, 250)
    
    
    
    
    #-------------------------------------------------  
    # 2. LIKELIHOODS AND ECOLOGICAL STATE MODEL
    #-------------------------------------------------
    
    # -------------------------------------------------        
    # 2.1. System process: female based matrix model
    # -------------------------------------------------
    
    for (tt in 2:T.count){
      
      nestlings[tt] <- mu.fec * 0.5 * Nterr[tt]                                                              ### number of local recruits
      N1[tt]  ~ dbin(ann.phi.juv.telemetry[tt], round(nestlings[tt-1]))                                                    ### number of 1-year old survivors - add CAPT.ADD in here
      N2[tt] ~ dbin(ann.phi.sec.telemetry[tt], round(N1[tt-1]))                                                      ### number of 2-year old survivors
      N3[tt] ~ dbin(ann.phi.third.telemetry[tt], round(N2[tt-1]))                                                    ### number of 3-year old survivors
      N4[tt] ~ dbin(mean.phi.terrvis[phase[tt]], round(N3[tt-1]))                                                       ### number of 4-year old survivors
      N5[tt] ~ dbin(mean.phi.terrvis[phase[tt]], round(N4[tt-1]))                                                ### number of 5-year old survivors
      N6[tt] ~ dbin(mean.phi.terrvis[phase[tt]], round((N5[tt-1]+N6[tt-1])))                                   ### number of 6-year or older (adult) birds
      
    } # tt
    
    
    
    # -------------------------------------------------        
    # 2.2. Observation process for population counts: state-space model of annual counts
    # -------------------------------------------------
    
    for (tlc in 1:T.count){
      Nterr[tlc] <- N4[tlc] * 0.024 + N5[tlc] * 0.124 + N6[tlc]                                    ### number of observable territorial birds
      for (s in 1:countries){			### start loop over every country
        Nterr.country[tlc,s] ~ dbin(country.prop[s],round(Nterr[tlc]))
        y.count[tlc,s] ~ dnorm(Nterr.country[tlc,s], tau.obs.count[s])								# Distribution for random error in observed numbers (counts)
      }

      

      # -------------------------------------------------        
      # 2.3. Likelihood for fecundity: Poisson regression from the number of surveyed broods (or binom for single broods after egg harvest)
      # -------------------------------------------------
      
      J.fec[tlc] ~ dpois(rho.fec[tlc])
      rho.fec[tlc] <- R.fec[tlc]*mu.fec
    } #	close loop over every year in which we have count and fecundity data
    
    
    
      # -------------------------------------------------        
      # 2.4. Goodness of Fit test for the SSM part (and the whole IPM)
      # -------------------------------------------------
          
    
        # Assessing the fit of the state-space model
    # 1. Compute fit statistic for observed data
    # Discrepancy measure: mean absolute error
    for (tgof in 1:T.count){
      C.exp[tgof] <- Nterr[tgof]                            # Expected counts
      C.act[tgof] <- sum(y.count[tgof,])
      Dssm.obs[tgof] <- abs((C.act[tgof] - C.exp[tgof]) / C.act[tgof])           # Discrepancy measure
    }
    Dmape.obs <- sum(Dssm.obs)

    # 2. Compute fit statistic for replicate data
    # Discrepancy measure: mean absolute error
    for (tgof in 1:T.count){
        for (sgof in 1:countries){			### start loop over every country
         C.rep.c[tgof,sgof] ~ dnorm(Nterr.country[tgof,sgof], tau.obs.count[sgof])								# Distribution for random error in observed numbers (counts)
        }
      C.rep[tgof] <- sum(C.rep.c[tgof,])                 # Generate replicate data
      Dssm.rep[tgof] <- abs((C.rep[tgof] - C.exp[tgof]) / C.rep[tgof])   # Discrepancy measure
    }
    Dmape.rep <- sum(Dssm.rep)
    
    
    
    # -------------------------------------------------        
    # 2.5. Likelihood for juvenile survival from telemetry
    # -------------------------------------------------
    
    # -------------------------------------------------
    # Define state-transition and observation matrices 
    # -------------------------------------------------
    
    for (i in 1:nind){
      
      for (t in f.telemetry[i]:(n.occasions-1)){
        
        # Define probabilities of state S(t+1) [last dim] given S(t) [first dim]
        
        ps[1,i,t,1]<-1    ## dead birds stay dead
        ps[1,i,t,2]<-0
        ps[1,i,t,3]<-0
        
        ps[2,i,t,1]<-(1-phi[i,t])
        ps[2,i,t,2]<-phi[i,t] * (1-tag.fail[i,t])
        ps[2,i,t,3]<-phi[i,t] * tag.fail[i,t]
        
        ps[3,i,t,1]<-(1-phi[i,t])
        ps[3,i,t,2]<-0
        ps[3,i,t,3]<-phi[i,t]
        
        # Define probabilities of O(t) [last dim] given S(t)  [first dim]
        
        po[1,i,t,1]<-0
        po[1,i,t,2]<-p.obs[i,t] * (1-tag.fail[i,t]) * (1-p.found.dead[i,t])
        po[1,i,t,3]<-0
        po[1,i,t,4]<-p.found.dead[i,t]
        po[1,i,t,5]<-(1-p.obs[i,t]) * tag.fail[i,t] * (1-p.found.dead[i,t])
        
        po[2,i,t,1]<-p.obs[i,t] * (1-tag.fail[i,t])
        po[2,i,t,2]<-0
        po[2,i,t,3]<-0
        po[2,i,t,4]<-0
        po[2,i,t,5]<-(1-p.obs[i,t]) * tag.fail[i,t]
        
        po[3,i,t,1]<-0
        po[3,i,t,2]<-0
        po[3,i,t,3]<-0
        po[3,i,t,4]<-0
        po[3,i,t,5]<-1
        
      } #t
    } #i
    
    # Likelihood 
    for (i in 1:nind){
      # Define latent state at first capture
      z.telemetry[i,f.telemetry[i]] <- 2 ## alive when first marked
      for (t in (f.telemetry[i]+1):n.occasions){
        # State process: draw S(t) given S(t-1)
        z.telemetry[i,t] ~ dcat(ps[z.telemetry[i,t-1], i, t-1,])
        # Observation process: draw O(t) given S(t)
        y.telemetry[i,t] ~ dcat(po[z.telemetry[i,t], i, t-1,])
      } #t
    } #i
    
    
    # -------------------------------------------------
    # Define state-transition and observation matrices 
    # -------------------------------------------------
    
    
    # -------------------------------------------------        
    # 2.6. Likelihood for adult survival from territory monitoring
    # -------------------------------------------------
    
    ### ECOLOGICAL STATE MODEL WITH ESTIMATE OF SURVIVAL
    
    for (ilterr in 1:nsite.terrvis){
      x.terrvis[ilterr,f.obsvis[ilterr]] <- 2 #firstobs[ilterr]
    
      for (klterr in (f.obsvis[ilterr]+1):nprim.terrvis){
        z.terrvis[ilterr,klterr] ~ dbin(mean.phi.terrvis[phase[klterr]],x.terrvis[ilterr,klterr-1])
        mu.x[ilterr,klterr] ~ dbin(mean.rec.terrvis,(2-z.terrvis[ilterr,klterr]))
        x.terrvis[ilterr,klterr] <- mu.x[ilterr,klterr] + z.terrvis[ilterr,klterr]

      } 						# close klterr loop over primary period  - years
    } 							# close ilterr loop over sites
    
    ### OBSERVATION MODEL WITH RANDOM EFFECT OF YEAR

    for (iobs in 1:nsite.terrvis){
      for (kobs in f.obsvis[iobs]:nprim.terrvis){
        linpred.terrvis[iobs,kobs] <- lmu.p.terrvis+beta.obs.eff.terrvis*eff.terrvis[iobs,kobs] + rand.obs.terrvis[iobs,kobs]
        p.terrvis[iobs,kobs] <- 1 / (1 + exp(-linpred.terrvis[iobs,kobs]))
        y.terrvis[iobs,kobs] ~ dbin(p.terrvis[iobs,kobs], x.terrvis[iobs,kobs])
        
        
        ## GOODNESS OF FIT TEST SECTION
        ## Expected occupancy at site iobs, survey kobs
        exp.terr[iobs,kobs] <- p.terrvis[iobs,kobs] * x.terrvis[iobs,kobs] 
    
        ## Discrepancy 
        ## (note small value added to denominator to avoid potential divide by zero)
        E.obs.terr[iobs,kobs] <- pow((y.terrvis[iobs,kobs] - exp.terr[iobs,kobs]), 2) / (exp.terr[iobs,kobs] + 0.5)

        ## Simulate new count from model
        y.rep.terr[iobs,kobs] ~ dbin(p.terrvis[iobs,kobs], x.terrvis[iobs,kobs])

        ## Discrepancy 
        E.rep.terr[iobs,kobs] <- pow((y.rep.terr[iobs,kobs] - exp.terr[iobs,kobs]), 2) / (exp.terr[iobs,kobs] + 0.5)

      } 						 # close kobs loop over year
      fit.terr.temp[iobs] <- sum(E.obs.terr[iobs,f.obsvis[iobs]:nprim.terrvis])
      fit.rep.terr.temp[iobs] <- sum(E.rep.terr[iobs,f.obsvis[iobs]:nprim.terrvis])
    } 							# close iobs loop over sites
    
    # chi-squared test statistics
    fit.terr <- sum(fit.terr.temp[])
    fit.rep.terr <- sum(fit.rep.terr.temp[])
    
    
    
    # -------------------------------------------------        
    # 3. DERIVED PARAMETERS
    # -------------------------------------------------
    
    ### 3.1 TELEMETRY DERIVED SURVIVAL ESTIMATES

  for(LIF in c(1:2)){    
    ## for WILD BIRDS
    for (ageprog in 1:36){
      logit(phi.wild.telemetry[ageprog,LIF]) <- lp.mean.telemetry +      ### intercept for mean survival 
        b.phi.mig*(migprog.age[ageprog]) +     ### survival dependent on migration (first-time crossing of sea)
        b.phi.age*ageprog +    ### survival dependent on age (juvenile or other)
        b.phi.LIFE*(LIF-1) +     ### survival dependent on LIFE project
        b.phi.long*(0.39219364)
    }

    ## for CAPTIVE-REARED DELAYED RELEASE BIRDS
    for (captageprog in 1:36){
      logit(phi.capt.telemetry[captageprog,LIF]) <- lp.mean.telemetry +      ### intercept for mean survival
        b.phi.capt +     ### survival dependent on captive-release (captive-raised or other)
        b.phi.mig*(captprog.age[captageprog]) +     ### survival dependent on migration (first-time crossing of sea)
        b.phi.age*captageprog +    ### survival dependent on age (juvenile or other)
        b.phi.LIFE*(LIF-1)  +     ### survival dependent on LIFE project
        b.phi.long*(0.39219364)
    }
  }  ## end LIFE loop  
    
  for (tt in 1:T.count){
    ann.phi.juv.telemetry[tt]<-phi.wild.telemetry[1,phase[tt]]*
    phi.wild.telemetry[2,phase[tt]]*
    phi.wild.telemetry[3,phase[tt]]*
    phi.wild.telemetry[4,phase[tt]]*
    phi.wild.telemetry[5,phase[tt]]*
    phi.wild.telemetry[6,phase[tt]]*
    phi.wild.telemetry[7,phase[tt]]*
    phi.wild.telemetry[8,phase[tt]]*
    phi.wild.telemetry[9,phase[tt]]*
    phi.wild.telemetry[10,phase[tt]]*
    phi.wild.telemetry[11,phase[tt]]*
    phi.wild.telemetry[12,phase[tt]]					### multiply monthly survival from age 1-12
    ann.phi.sec.telemetry[tt]<-phi.wild.telemetry[13,phase[tt]]*phi.wild.telemetry[14,phase[tt]]*phi.wild.telemetry[15,phase[tt]]*phi.wild.telemetry[16,phase[tt]]*phi.wild.telemetry[17,phase[tt]]*phi.wild.telemetry[18,phase[tt]]*phi.wild.telemetry[19,phase[tt]]*phi.wild.telemetry[20,phase[tt]]*phi.wild.telemetry[21,phase[tt]]*phi.wild.telemetry[22,phase[tt]]*phi.wild.telemetry[23,phase[tt]]*phi.wild.telemetry[24,phase[tt]]					### multiply monthly survival from age 13-24
    ann.phi.third.telemetry[tt]<-phi.wild.telemetry[25,phase[tt]]*phi.wild.telemetry[26,phase[tt]]*phi.wild.telemetry[27,phase[tt]]*phi.wild.telemetry[28,phase[tt]]*phi.wild.telemetry[29,phase[tt]]*phi.wild.telemetry[30,phase[tt]]*phi.wild.telemetry[31,phase[tt]]*phi.wild.telemetry[32,phase[tt]]*phi.wild.telemetry[33,phase[tt]]*phi.wild.telemetry[34,phase[tt]]*phi.wild.telemetry[35,phase[tt]]*phi.wild.telemetry[36,phase[tt]]					### multiply monthly survival from age 25-36
    
    ann.phi.capt.rel.first.year[tt]<-phi.capt.telemetry[8,phase[tt]]*phi.capt.telemetry[9,phase[tt]]*phi.capt.telemetry[10,phase[tt]]*phi.capt.telemetry[11,phase[tt]]*phi.capt.telemetry[12,phase[tt]]*phi.capt.telemetry[13,phase[tt]]*phi.capt.telemetry[14,phase[tt]]*phi.capt.telemetry[15,phase[tt]]*phi.capt.telemetry[16,phase[tt]]*phi.capt.telemetry[17,phase[tt]]*phi.capt.telemetry[18,phase[tt]]*phi.capt.telemetry[19,phase[tt]]*phi.capt.telemetry[20,phase[tt]]*phi.capt.telemetry[21,phase[tt]]*phi.capt.telemetry[22,phase[tt]]*phi.capt.telemetry[23,phase[tt]]*phi.capt.telemetry[24,phase[tt]]					### first year for delayed-release bird is longer, from month 8 to 24 
    
  } ### end loop over years
    
    
    ### 3.2 POPULATION GROWTH DERIVED FROM COUNTS    
    
    # Annual population growth rate
    for (ipop in 1:(T.count-1)){
      lambda.t[ipop] <- Nterr[ipop+1] / max(Nterr[ipop],1)           ### inserted max of 1 to avoid this becoming an invalid parent error
      loglambda.t[ipop]<-log(lambda.t[ipop])## for calculating geometric mean of overall population growth rate
    }
    
    #### OVERALL POPULATION GROWTH RATE  #########
    mean.lambda<-exp((1/(T.count-1))*sum(loglambda.t[1:(T.count-1)]))   # Geometric mean
    
    
    
    
    # -------------------------------------------------        
    # 4. PREDICTION INTO THE FUTURE
    # -------------------------------------------------
    ### INCLUDE SCENARIOS FOR N CAPTIVE BIRDS AND SURVIVAL IMPROVEMENT
    
    # CAPTIVE RELEASE OF JUVENILE BIRDS
    for (ncr in 1:scen.capt.release){
      
      ### FUTURE FECUNDITY IS BASED ON mu.fec
      
      for (fut in 1:PROJECTION){
        fut.fec[fut,ncr] <-mu.fec  ## no chicks taken after 5 years anymore
        fut.survival[ncr,fut] <-mean.phi.terrvis[2] ### future survival remains as under LIFE project
      }
        
        ## POPULATION PROCESS
        ## need to copy previous array elements
        nestlings.f[ncr,1] <- round(nestlings[T.count])   ##JUV[T.count]
        N1.f[ncr,1] <- N1[T.count]
        N2.f[ncr,1] <- N2[T.count]
        N3.f[ncr,1] <- N3[T.count]
        N4.f[ncr,1] <- N4[T.count]
        N5.f[ncr,1] <- N5[T.count]
        N6.f[ncr,1] <- N6[T.count]
        Nterr.f[ncr,1] <- Nterr[T.count]
        N2wild.f[ncr,1] <- 0
        N2released.f[ncr,1] <- 0
        
        for (fut in 2:PROJECTION){
          
          ### probabilistic formulation
          nestlings.f[ncr,fut] <- (fut.fec[fut,ncr] * 0.5 * Nterr.f[ncr,fut])           ### number of local recruits calculated as REDUCED fecundity times number of territorial pairs
          N1.f[ncr,fut] ~ dbin(ann.phi.juv.telemetry[T.count],round(nestlings.f[ncr,fut-1]))             ### +rescued[ncr,fut] number of 1-year old survivors
          N2wild.f[ncr,fut] ~ dbin(ann.phi.sec.telemetry[T.count],round(N1.f[ncr,fut-1]))                ### number of 2-year old wild survivors
          N2released.f[ncr,fut] ~ dbin(ann.phi.capt.rel.first.year[T.count],round(capt.release[fut]))             ### +rescued[ncr,fut] number of 1-year old survivors 
          N2.f[ncr,fut] <-  N2wild.f[ncr,fut] + N2released.f[ncr,fut]       ### sum of the N1 cohort derived from wild and captive-bred juveniles 
          N3.f[ncr,fut] ~ dbin(ann.phi.third.telemetry[T.count],round(N2.f[ncr,fut-1]))                                                    ### number of 3-year old survivors
          N4.f[ncr,fut] ~ dbin(fut.survival[ncr,fut],round(N3.f[ncr,fut-1]))                                                       ### number of 4-year old survivors
          N5.f[ncr,fut] ~ dbin(fut.survival[ncr,fut],round(N4.f[ncr,fut-1]))                                                       ### number of 5-year old survivors
          N6.f[ncr,fut] ~ dbin(fut.survival[ncr,fut],round((N5.f[ncr,fut-1]+N6.f[ncr,fut-1])))                                   ### number of 6-year or older (adult) birds
          Nterr.f[ncr,fut] <- round((N4.f[ncr,fut] * 0.024) + (N5.f[ncr,fut] * 0.124) + (N6.f[ncr,fut]))
          
          
        } # fut
        
        for (fut2 in 1:(PROJECTION-1)){
          lambda.t.f[ncr,fut2] <- Nterr.f[ncr,fut2+1] / max(Nterr.f[ncr,fut2],1)
          loglambda.t.f[ncr,fut2]<-log(lambda.t.f[ncr,fut2])## for calculating geometric mean of overall population growth rate
        } # fut2
        
        
        #### FUTURE POPULATION GROWTH RATE  #########
        fut.lambda[ncr]<-exp((1/(PROJECTION-1))*sum(loglambda.t.f[ncr,1:(PROJECTION-1)]))   # Geometric mean
      
    } # end scenario of n capt released
    
  } # END of the JAGS model
    
