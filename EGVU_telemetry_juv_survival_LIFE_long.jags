
  model {
    
    # -------------------------------------------------
    # Parameters:
    # phi: monthly survival probability intercept
    # tag.fail: probability that tag will fail
    
    # p.obs: probability to be tracked with functioning tag (=1)
    # p.found.dead: probability for carcass to be recovered
    # p.seen.alive: probability to be observed alive despite the tag being defunct
    
    # -------------------------------------------------
    # States (S):
    # 1 dead
    # 2 alive with functioning tag
    # 3 alive with defunct tag or tag lost
    
    # Observations (O):
    # 1 Tag ok, bird moving
    # 2 Tag ok, bird not moving (dead, or tag lost and no longer on bird)
    # 3 Tag failed, bird observed alive
    # 4 Dead bird recovered
    # 5 No signal (=not seen)
    
    # -------------------------------------------------
    
    # Priors and constraints
    
    
    #### MONTHLY SURVIVAL PROBABILITY
    for (i in 1:nind){
      for (t in f[i]:(n.occasions)){
        logit(phi[i,t]) <- lp.mean +      ### intercept for mean survival 
            b.phi.capt*(capt[i]) +     ### survival dependent on captive-release (captive-raised or other)
            b.phi.mig*(mig[i,t]) +     ### survival dependent on migration or not (in this month)
            b.phi.age*(age[i,t]) +    ### survival dependent on age (juvenile or other)
            b.phi.LIFE*(LIFE[i,t]) +     ### survival dependent on LIFE project
            b.phi.long*(long[i])*(juv[i,t]) ### survival varies for juvenile first-time migrants when they originate from farther west
      } #t
    } #i
    
    #### BASELINE FOR SURVIVAL PROBABILITY (wild adult stationary from east)
    mean.phi ~ dunif(0.9, 1)   # uninformative prior for all MONTHLY survival probabilities
    lp.mean <- log(mean.phi/(1 - mean.phi))    # logit transformed survival intercept

    #### SLOPE PARAMETERS FOR SURVIVAL PROBABILITY
    b.phi.age ~ dnorm(0, 0.001)           # Prior for COST OF MIGRATION migration on survival probability on logit scale
    b.phi.capt ~ dnorm(0, 0.001)         # Prior for captive release on survival probability on logit scale
    b.phi.mig ~ dunif(-2,0)         # Prior for captive release on survival probability on logit scale
    b.phi.LIFE ~ dnorm(0, 0.001)         # Prior for LIFE effect on survival probability on logit scale    
    b.phi.long ~ dnorm(0, 0.001)         # Prior for longitudinal effect on survival probability on logit scale  
    
    #### TAG FAILURE AND LOSS PROBABILITY
    for (i in 1:nind){
      for (t in f[i]:(n.occasions)){
        logit(p.obs[i,t]) <- base.obs
        logit(tag.fail[i,t]) <- base.fail #+ beta3*tfail[i] #### probability of TAG FAILURE is influenced by tag type and tag age
        logit(p.found.dead[i,t]) <- base.recover
      } #t
    } #i
    
    
    ##### SLOPE PARAMETERS FOR OBSERVATION PROBABILITY
    base.obs ~ dnorm(0, 0.001)                # Prior for intercept of observation probability on logit scale
    base.fail ~ dnorm(0, 0.001)               # Prior for intercept of tag failure probability on logit scale
    base.recover ~ dnorm(0, 0.001)               # Prior for intercept of tag failure probability on logit scale
    #beta3 ~ dnorm(0, 0.001)T(-10, 10)         # Prior for slope parameter for fail probability with tag movement during last 10 GPS fixes
    
    
    # -------------------------------------------------
    # Define state-transition and observation matrices 
    # -------------------------------------------------
    
    for (i in 1:nind){
      
      for (t in f[i]:(n.occasions-1)){
        
        # Define probabilities of state S(t+1) [last dim] given S(t) [first dim]
        
        ps[1,i,t,1]<-1    ## dead birds stay dead
        ps[1,i,t,2]<-0
        ps[1,i,t,3]<-0
        
        ps[2,i,t,1]<-(1-phi[i,t])
        ps[2,i,t,2]<-phi[i,t] * (1-tag.fail[i,t])
        ps[2,i,t,3]<-phi[i,t] * tag.fail[i,t]
        
        ps[3,i,t,1]<-(1-phi[i,t])
        ps[3,i,t,2]<-0
        ps[3,i,t,3]<-phi[i,t]
        
        # Define probabilities of O(t) [last dim] given S(t)  [first dim]
        
        po[1,i,t,1]<-0
        po[1,i,t,2]<-p.obs[i,t] * (1-tag.fail[i,t]) * (1-p.found.dead[i,t])
        po[1,i,t,3]<-0
        po[1,i,t,4]<-p.found.dead[i,t]
        po[1,i,t,5]<-(1-p.obs[i,t]) * tag.fail[i,t] * (1-p.found.dead[i,t])
        
        po[2,i,t,1]<-p.obs[i,t] * (1-tag.fail[i,t])
        po[2,i,t,2]<-0
        po[2,i,t,3]<-0
        po[2,i,t,4]<-0
        po[2,i,t,5]<-(1-p.obs[i,t]) * tag.fail[i,t]
        
        po[3,i,t,1]<-0
        po[3,i,t,2]<-0
        po[3,i,t,3]<-0
        po[3,i,t,4]<-0
        po[3,i,t,5]<-1
        
      } #t
    } #i
    
    # Likelihood 
    for (i in 1:nind){
      # Define latent state at first capture
      z[i,f[i]] <- 2 ## alive when first marked
      for (t in (f[i]+1):n.occasions){
        # State process: draw S(t) given S(t-1)
        z[i,t] ~ dcat(ps[z[i,t-1], i, t-1,])
        # Observation process: draw O(t) given S(t)
        y[i,t] ~ dcat(po[z[i,t], i, t-1,])
        rep.states[i,t] ~ dcat(po[z[i,t], i, t-1,])    ## include this as goodness of fit measure
      } #t
    } #i
  }
    
